class Node:
    def __init__(self, data):
        self.data = data
        self.next = None
        self.prev = None

    def __str__(self):
        return str(self.data)

class Dllist:
    def __init__(self, data):
        new_node = Node(data)
        self.head = new_node
        self.size = 1

    def __str__(self):
        print_list = ''
        node = self.head
        while True:
            print_list += str(node)
            if node.next == self.head:
                break
            node = node.next
            print_list += ' '
        print_list += ' '
        return print_list

    def get_index_node(self, num):

        if self.size < 1:
            return # Underflow
        elif self.size <= num:
            return # Overflow

        count = 0
        node = self.head

        if int(self.size / 2) > num:
            while count < num:
                node = node.next
                count += 1
        else:
            repeat = self.size - num
            while count < repeat:
                node = node.prev
                count += 1
        return node

    def get(self,num):
        node = self.get_index_node(num)
        if self.size < num:
            print("invalid position")
        else:
            print(str(node.data))


    def inserthead(self, data):
        new_node = Node(data)
        if not self.head.prev == None:
            new_node.prev = self.head.prev
            self.head.prev.next = new_node
        if not self.head.next == None:
            new_node.next = self.head.next
        self.head.prev = new_node
        self.head = new_node

    def insert(self, num, data):
        node = self.get_index_node(num)
        new_node = Node(data)
        new_node.prev = node.prev
        new_node.next = node
        node.prev.next = new_node
        node.prev = new_node
        self.size += 1

    def insert_tail(self, data):
        new_node = Node(data)
        if self.head.next == None:
            self.head.next = new_node
            new_node.prev = self.head

        if not self.head.prev == None:
            self.head.prev.next = new_node
            new_node.prev = self.head.prev
        self.head.prev = new_node
        new_node.next = self.head
        self.size += 1


    def delete(self, num):
        if self.size < 1:
            print("invalid position")
            return
        elif self.size <= num:
            print("invalid position")
            return

        if num == 0:
            self.deleteHead()
            return
        node = self.get_index_node(num)
        node.prev.next = node.next
        node.next.prev = node.prev
        del node
        self.size -= 1

    def deleteHead(self):
        node = self.head
        node.prev.next = node.next
        node.next.prev = node.prev
        self.head = node.next
        del node
        self.size -= 1

    def sizeof(self):
        return str(self.size)



if __name__ == "__main__":
    dll = Dllist(1)
    dll.insert_tail(5)
    dll.insert_tail(6)
    print(dll)
    print(dll.sizeof())

    dll.insert(1, 15)
    print(dll)

    dll.inserthead(100)
    print(dll)

    dll.delete(0)
    print(dll)
    dll.delete(1)
    print(dll)
    print("====")
    dll.get(0)
    dll.get(1)
    dll.get(3)


    
