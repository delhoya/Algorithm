
#Bottom up Heap 상향식 힙 만들기 (min)

class Bheap:
    def __init__(self):
        self.a = []
        self.size = 0

    def size(self):
        return self.size

    # 아래 -> 위 올라가면서 힙 속성 회복
    def upheap(self,j):
        # 부모 (j//2)가 자식(j)보다 크면 반복: 부모가 더 작은 min 힙
        while j > 1 and self.a[j//2] > self.a[j]:
            # 부모 자식 교환
            self.a[j], self.a[j//2] = self.a[j//2] ,self.a[j]
            # 현재 노드가 부모노드로 한 층 올라감
            j = j//2

    # 위-> 아래 내려가며 힙 속성 회복
    def downheap(self,i):
        # 맨 끝으로 내려갈까지 계속
        while 2*i <= self.size:
            # 자식 인덱스 저장
            k = 2*i
            # 자식 k 가 부모 size 보다 작을때 and
            # 인덱스 k 왼쪽 > 인덱스 k+1 오른쪽 이면 k+1 로 교환할 것 선택
            if k < self.size and self.a[k] > self.a[k + 1]:
                k += 1
            # min 힙속성 만족 시 루프 break (k = 2i)
            if self.a[i] < self.a[k]:
                break
            # 삽입노드 (i) 자식 (2i) 노드  교환 진행
            self.a[i], self.a[k] = self.a[k], self.a[i]
            # 한 층 내려감 (k = 2i )
            i = k

    def create_heap(self):
        # 0 ~ size//2 부모노드  (size//2 + 1 ~ size 까지는 자식노드이므로힙 수행 X)
        for i in range(self.size//2 , 0 , -1):
            self.downheap(i)

    def insert(self,key_value):
        self.size +=1
        self.a.append(key_value)
        # 상향식으로 힙속성 회복
        self.upheap(self.size)

    def delete_min(self):
        if self.size == 0 :
            print('empty')
            return None
        # min 힙에서 최소값 보관
        min = self.a[1]
        # 최소값과 교환 (제일 위로 올려줌)
        self.a[1], self.a[-1] = self.a[-1],self.a[1]
        # 삭제
        del self.a[-1]
        # 사이즈 조정
        self.size -= 1
        # 힙속성 회복
        self.downheap(1)

        # 최소값 반환
        return min

    def display(self):
        print("□",end='')
        print(" ".join(map(str, self.a[1:])))



if __name__ == '__main__':

    n1 = int(input())
    n2 = (input().split())

    heap = Bheap()
    a = [None] * n1

    heap.insert(n2[0])
    heap.insert(n2[1])

    heap.display()
