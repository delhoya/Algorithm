

class Node:
    def __init__(self,item,prev=None,next=None):
        self.item = item
        self.prev = prev
        self.next = next

class CircleDeque:

    def __init__(self):
        self.front = Node(None,None,None)
        self.rear = Node(None,None,None)
        self.front.next = self.rear
        self.rear.prev = self.front
        self.size = 0

    def isEmpty(self):
        return self.size == 0

    def add_front(self,item):
        if self.isEmpty():
            temp = Node(item,None,None)
            self.front = temp
            self.rear.prev = self.front
            self.front.next = self.rear
            self.size += 1

        else:
            new_node = Node(item,None,None)
            temp = self.front
            self.front.prev = new_node
            new_node.next = self.front
            self.size += 1

    def add_rear(self,item):
        if self.isEmpty():
            temp = Node(item,None,None)
            self.rear = temp
            self.front.next = self.rear
            self.rear.prev = self.front
            self.size += 1

        else:
            new_node = Node(item,None,None)
            temp = self.rear
            self.rear.next = new_node
            new_node.rear = self.rear
            self.size += 1

    def delete_front(self):
        pass

    def delete_rear(self):
        pass

    def print(self):
        if self.isEmpty():
            print('underflow')
        else:
            temp = self.front.next
            while temp.next != self.rear:
                print("â–¡",end='')
                print(temp.item)
                temp = temp.next


if __name__ == '__main__':

    cq = CircleDeque()

    cq.print()
    cq.add_front(10)
    cq.print()
    cq.add_rear(20)
    cq.print()
