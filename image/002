
import cv2
import numpy as np
import matplotlib.pyplot as plt
import os

# 테스트 이미지 입력
src = ('C:/Users/user/Desktop/CV2_TEST/Fig-13-RoseBMP-240x180-pixels.PNG')

# 이미지 경로 지정
Images_file_path = 'C:/Users/user/Desktop/lungman_image'
Images_file_name = os.listdir(Images_file_path)
Images_file_nums = len(Images_file_name)

# 이름 구별할 리스트 생성
input_name_list = ['80kV', '120kV']
name_list_0 = []
name_list_1 = []

for i in range(Images_file_nums):
    if input_name_list[0] in Images_file_name[i]:
        name_list_0.append(Images_file_name[i])
    elif input_name_list[1] in Images_file_name[i]:
        name_list_1.append(Images_file_name[i])

# binary 데이터 bit 데이터 변경
def convert_binary_bit(x,y,nums,src):

    # 입력 픽셀 np.array 생성
    X_pixel = x
    Y_pixel = y
    temp_array = np.zeros([X_pixel*Y_pixel])

    # 입력 이미지 개수 만큼 변환 (반복문)
    # 16bit(int) - u2 , 32bit(float) -f4
    for i in range(nums):
        with open(Images_file_path + '/' + src[i], "rb") as file:
            bit_data = np.fromfile(file, dtype='u2')
            temp_array += bit_data
            # 더해준것을 나눠준다 (평균값)
            temp_array /= nums
            # reshape (x_pixel ,y_pixcel)
            temp_array = temp_array.reshape(X_pixel, Y_pixel)

    return temp_array

# plt 이미지 출력 함수
def plt_image_show(title, src):
    plt.title(title)
    plt.imshow(src)
    plt.colorbar()

# cv2 이미지 출력 함수
def cv2_image_show(image_name, src):
    cv2.imshow(image_name,src)
    cv2.waitKey()

# 16비트 - 8비트 변환
def convert_16to8bit(im):
    min_16bit = np.min(im)
    max_16bit = np.max(im)
    image_8bit = np.array(np.rint((255 * (im - min_16bit)) / float(max_16bit - min_16bit)), dtype=np.uint8)
    return image_8bit

# 그레이 이미지 반환
def gray_image(src):
    return cv2.imread((src),cv2.IMREAD_GRAYSCALE)

# 리 스케일링 함수
def resize_image(src,x,y):
    # fx ,fy 스케일링 이용 (입력값 베율)
    dst1 = cv2.resize(src, (0, 0), fx=x, fy=y, interpolation=cv2.INTER_NEAREST)
    return dst1

# sobel 알고리즘
def get_gradient_Sobel(im):

    #가우시안 스무딩
    im = cv2.GaussianBlur(im, (0, 0), 2)

    # 소벨 오퍼레이터 적용 x,y
    grad_x = cv2.Sobel(im, cv2.CV_8U, 1, 0, ksize=3)
    grad_y = cv2.Sobel(im, cv2.CV_8U, 0, 1, ksize=3)
    # x,y 방향 기울기 합치기
    grad_image = cv2.addWeighted(np.absolute(grad_x), 0.5, np.absolute(grad_y), 0.5, 0)
    return grad_image

# Canny 알고리즘
def get_gradient_Canny(im,th1,th2):

    #가우시안 스무딩
    im = cv2.GaussianBlur(im, (0, 0), 2)

    grad_image_canny = cv2.Canny(im,cv2.CV_8U,th1,th2)
    return grad_image_canny

# 샤프닝 함수 https://deep-learning-study.tistory.com/155?category=946336
def sharpening_image(src):
    # CV2.GaussianBlur 사용
    blr = cv2.GaussianBlur(src, (0, 0), 2)
    # 샤프닝 정도 입력
    a = 2.0
    # np.clip 함수 사용
    dst = np.clip((1 + a) * src - a * blr, 0, 255).astype(np.uint8)
    return dst

# 8비트 이미지 히스토그램
def show_histogram(src):
    hist = cv2.calcHist([src],[0],None,[256],[0,256])
    plt.plot(hist)


""""

외각선 컨투어 구현 

"""

# X-ray image (16bit)
X_image_80kV = convert_binary_bit(3072,3072,1,name_list_0)
X_image_120kV = convert_binary_bit(3072,3072,1,name_list_1)

# X-ray image (8bit)
X_image_80kV_8bit = convert_16to8bit(X_image_80kV)
X_image_80kV_8bit_resized = resize_image(X_image_80kV_8bit,0.25,0.25)
X_image_120kV_8bit = convert_16to8bit(X_image_120kV)
X_image_120kV_8bit_resized = resize_image(X_image_120kV_8bit,0.25,0.25)

# Edge detection (Sobel,canny)
X_image_80kV_Sobel = get_gradient_Sobel(X_image_80kV_8bit_resized)
X_image_120kV_Sobel = get_gradient_Sobel(X_image_120kV_8bit_resized)

X_image_80kV_canny = get_gradient_Canny(X_image_80kV_8bit_resized,14,222)
X_image_120kV_canny = get_gradient_Canny(X_image_120kV_8bit_resized,14,222)

# sharpening X-ray image
X_image_80kV_sharpe = sharpening_image(X_image_80kV_8bit_resized)
X_image_120kV_sharpe = sharpening_image(X_image_120kV_8bit_resized)

# sharp edge detection
X_image_80kV_s_Sobel = get_gradient_Sobel(X_image_80kV_sharpe)
X_image_120kV_s_Sobel = get_gradient_Sobel(X_image_120kV_sharpe)

X_image_80kV_s_canny = get_gradient_Canny(X_image_80kV_sharpe,14,222)
X_image_120kV_s_canny = get_gradient_Canny(X_image_120kV_sharpe,14,222)


# dual X-ray DES
#X_image_DES = 3*(X_image_80kV_8bit_resized)-1*(X_image_120kV_8bit_resized)
#X_image_DES = (X_image_120kV_8bit_resized)*np.exp(1/X_image_80kV_canny)
X_image_DES = np.exp(1/X_image_120kV_sharpe)*np.exp(1/X_image_120kV_canny)


#sharp edge
cv2_image_show("grad_sobel",X_image_120kV_s_Sobel)
cv2_image_show("grad_canny",X_image_120kV_s_canny)

# 출력
cv2_image_show("x-ray DES",X_image_DES)
cv2_image_show("x-ray_resized_80kV",X_image_80kV_8bit_resized)
cv2_image_show("x-ray_resized_120kV",X_image_120kV_8bit_resized)

# Edge detection 출력
cv2_image_show("grad_sobel",X_image_80kV_Sobel)
cv2_image_show("grad_canny",X_image_120kV_canny)




# sharpening 출력
cv2_image_show("x-ray DES sharpening ",sharpening_image(X_image_DES))
cv2_image_show("x-ray sharpening 80kV",X_image_80kV_sharpe)
cv2_image_show("x-ray sharpening 120kV",X_image_120kV_sharpe)





"""
# 엑스레이 이미지 히스토그램 분포 확인
plt.subplots(figsize=(14, 5))
plt.subplot(131)
show_histogram(X_image_80kV_8bit_resized)
plt.subplot(132)
show_histogram(X_image_120kV_8bit_resized)
plt.subplot(133)
show_histogram(X_image_DES)
plt.show()
"""

"""
plt 이용한 간이 검출 
plt.subplots(figsize=(14, 5))
plt.subplot(131)
plt_image_show("image", 2 * X_image_80kV - (X_image_120kV))

plt.subplot(132)
plt_image_show("image", 3 * X_image_80kV - (X_image_120kV))

plt.show()
"""


"""
src 파일 임시 테스트
show_histogram(gray_image(src))

cv2_image_show("gray_img", gray_image(src))
cv2_image_show("sharped_img", sharpening_image(gray_image(src)))
cv2_image_show("resized_img", resize_image(gray_image(src), 0.5, 0.5))

cv2_image_show("grad_sobel", get_gradient_Sobel(gray_image(src)))
cv2_image_show("grad_canny", get_gradient_Canny(gray_image(src), 10, 30))

cv2_image_show("resized_grad_sobel", get_gradient_Sobel(resize_image(gray_image(src), 3, 3)))
cv2_image_show("resized_grad_canny", get_gradient_Canny(resize_image(gray_image(src), 3, 3), 10, 30))
"""
