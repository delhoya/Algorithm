
class maxheap:

    def __init__(self):
        self.heap =[]
        self.heap.append(0)

    def size(self):
        return len(self.heap) - 1

    def isEmpty(self):
        return self.size == 0

    def parent(self,i):
        return self.heap[i//2]

    def left(self,i):
        return self.heap[i*2]

    def right(self,i):
        return self.heap[i*2+1]

    def display(self):
        print("□",end='')
        print(" ".join(map(str, self.heap[1:])))

    def insert(self,n):
        # 맨 마지막에 n 삽입
        self.heap.append(n)
        # n 의 위치를 저장할 객체 i
        i = self.size()
        # n의 위치가 root가 아니고 n의 값이 부모의 값보다 크다면 (맥스힙_올려줘야함)
        while(i != 1 and n > self.parent(i)):
            # i 위치에 i의 부모 값 삽입
            self.heap[i] = self.parent(i)
            # i 위치 설정 (부모위치)
            i = i//2
        # 마지막 위치에 n 삽입
        self.heap[i] = n
        return print("0")

    def delete(self):
        # 임의의 부모 자식 노드
        parent = 1
        child = 2
        if not self.isEmpty():
            # 현재 힙의 루트 노드 저장
            hroot = self.heap[1]
            # 현재 힙의 마지막 노드 저장
            last = self.heap[self.size()]
            # 자식이 size 보다 클때까지 반복 (마지막 노드 이전까지)
            while (child <= self.size()):
                # 만약 자식이 힙의 인덱스보다 작고 & 부모 기준 자식의 왼쪽 / 오른쪽 비교 (기본 오른쪽)
                if child < self.size() and self.left(parent) < self.right(parent):
                    # 자식의 인덱스 +1
                    child += 1
                # 힙의 마지막 노드가 자식보다 크거나 같으면 종료 (더큰 자식을 찾음)
                if last >= self.heap[child]:
                    break;
                # 부모에 자식 값 저장
                self.heap[parent] = self.heap[child]
                # 부모에 자식 인덱스 저장
                parent = child
                # 다음 자식 인덱스
                child *= 2;

            # 현재 힙의 마지막 노드를 parent 위치에 복사
            self.heap[parent] = last
            # 맨 마지막 노드 삭제
            self.heap.pop (-1)
            return print(hroot)

if __name__ == '__main__':

    heap = maxheap()

    while (True):

        n = input().split()

        if n[0] == "i":
            heap.insert(int(n[1]))
        elif n[0] == "d":
            heap.delete()
        elif n[0] == "p":
            heap.display()
        elif n[0] == "q":
            exit()
