//무방향 그래프 간선을 통해 양방향으로 이동할 수 있는 그래프 G(A,B)는 G(B,A)와 동일

//방향 그래프 간선에 방향이 존재하는 그래프 G(A,B)와 G(B,A)는 다름

//가중치 그래프 간선에 비용 또는 가중치가 할당된 그래프 '네트워크' 라고도 함



package Graph_07;

import java.util.*;
 
    class Edge <W, V> {  // Edge를 하나의 클래스로 표현하여 입력 받음
    private W weight; // edge에 부여된 가중치 
    private V v; // edge 끝 부분에 있는 vertex의 번호
    
    public void set_Edge(W weight, V v){ // edge에 값 setting하는 함수
        this.weight = weight;
        this.v = v;
        }
 
    }
 

public class AdjacencyTest02 {
 
    static int nV;
    static int nE;
        
    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        AdjacencyTest02 hello = new AdjacencyTest02();
        
        nV = scan.nextInt();  // 전체 Vertex 개수 받기
        nE = scan.nextInt();  // 전체 Edge 개수 받기
        
        ArrayList<Edge> ad = new <Edge> ArrayList();
        Edge <Integer, Integer>ed = new  <Integer, Integer> Edge();
        
        for(int i = 0; i < nV; i++)
            ad.add(new <Integer, Integer> Edge()); //edge 초기화 (메모리 할당)
    
        for(int i = 0; i < nE; i++){
            int t1 = scan.nextInt(); // 시작 vertex 입력 받기
            int t2 = scan.nextInt(); // 끝 vertex 입력 받기
            int t3 = scan.nextInt(); // weight 입력 받기
            
            ad.get(t1).set_Edge(t2, t3);
            ad.get(t2).set_Edge(t1, t3);
        }
    }
}


