

import sys
# 노드 수
n = 7
#
s = 0

# 인접리스트 입력그래프
g = [None] * n # 리스트 구현
g[0] = [(1,9),(2,10)] # 리스트 안의 튜플로 표현
g[1] = [(0,9),(3,10),(4,5),(6,3)]
g[2] = [(0,10),(3,9),(4,7),(5,2)]
g[3] = [(1,10),(2,9),(5,4),(6,8)]
g[4] = [(1,5),(2,7),(6,1)]
g[5] = [(2,2),(3,4),(6,6)]
g[6] = [(1,3),(3,8),(4,1),(5,6)]

visited = [False] * n # 아직 방문하지 않았으므로 False
d = [sys.maxsize] * n # 각 원소 시스템 최댓값 지정
d[s] = 0 # 초기화
prev = [None] * n # 트리 간선 추출
prev[s] = s 

if __name__ == '__main__':

    for k in range(n):
        m = -1  # min 간선 (아직 지나감 X?)
        min = sys.maxsize # infinit 지정

        for j in range(n):
            # 방문하지 않았고 & d의 원소값이 min(sys.max) = infinit 보다 작을 경우 
            if not visited[j] and d[j] < min:
                # min 값은 d[j] / 최소값 갱신
                min = d[j]
                # m = j
                m = j
        
        # m은 방문하였으므로 True 
        visited[m] = True
        
        # g[] 리스트 w,wt (노드 , 간선)
        for w, wt in list(g[m]):
            # 만약 방문하지 않았다면
            if not visited[w] :
                # 간선이 d[w]보다 작으면 갱신
                if wt < d[w]:
                    d[w]=wt
                    prev[w]=m

mst_cost = 0
for i in range(1,n):
    print("(%d,%d)"% (i,prev[i]) , end='')
    mst_cost += d[i]

print("","최소신장", mst_cost , end='')
