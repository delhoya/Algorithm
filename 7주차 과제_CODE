

class Node:
    def __init__(self,item,prev=None,next=None):
        self.item = item
        self.prev = prev
        self.next = next

class CircleDeque:

    def __init__(self):
        self.front = Node(None,None,None)
        self.rear = Node(None,None,None)
        self.front.next = self.rear
        self.rear.prev = self.front
        self.size = 0

    def isEmpty(self):
        return self.size == 0

    def add_front(self,item):

        if self.isEmpty():

            temp = Node(item,None,None)

            #temp의 위치를 self.front와 연결
            self.front.next = temp
            temp.prev = self.front

            # temp의 위치를 self.rear 와 연결
            temp.next = self.rear
            self.rear.prev = temp

            # 사이즈 1 증가
            self.size += 1

        else:
            temp = Node(item,None,None)

            # temp의 위치를 self.front.next 에 삽입
            temp.next = self.front.next
            self.front.next.prev = temp

            # temp를 self.front 와 연결
            self.front.next = temp
            temp.prev = self.front

            #사이즈 1 증가
            self.size +=1


    def add_rear(self,item):

        if self.isEmpty():
            temp = Node(item,None,None)

            # self.rear 와 temp 연결

            self.rear.prev = temp
            temp.next = self.rear
            #self.front 와 temp 연결

            self.front.next = temp
            temp.prev = self.front
            # 사이즈 1 증가

            self.size += 1

        else:
            temp = Node(item,None,None)

            #self.rear.prev 와 temp 연결
            self.rear.prev.next = temp
            temp.prev = self.rear.prev

            # temp 와 self.rear 연결
            temp.next = self.rear
            self.rear.prev = temp

            # 사이즈1 증가
            self.size += 1

    def delete_front(self):

        if self.size == 1 :
            # 초기화 진행
            self.front.next = self.rear
            self.rear.prev = self.front
            self.size = 0
        else:
            # self.front.next 를 삭제 (next 포인터 건너뛰기 연결 )
            # self.front와 먼저 연결
            self.front.next.next.prev = self.front
            self.front.next = self.front.next.next
            self.size -= 1

    def delete_rear(self):

        if self.size == 1 :
            # 초기화 진행
            self.front.next = self.rear
            self.rear.prev = self.front
            self.size = 0
        else:
            # self.rear.prev 를 삭제 (prev 포인터 건너뛰기 연결)
            # self.rear와 먼저 연결
            self.rear.prev.prev.next = self.rear
            self.rear.prev = self.rear.prev.prev
            self.size -= 1


    def print(self):

        list = []
        if self.isEmpty():
            print('underflow')
        else:
            temp = self.front
            list.append("□")
            while temp.next != self.rear:
                list.append(temp.next.item)
                temp = temp.next
            print(list)


if __name__ == '__main__':

    cq = CircleDeque()

    cq.add_front(30)
    cq.print()
    cq.add_front(20)
    cq.print()
    cq.add_rear(10)
    cq.print()
    cq.add_rear(5)
    cq.print()
    cq.delete_rear()
    cq.print()
    cq.delete_rear()
    cq.print()
    cq.delete_rear()
    cq.print()
    cq.delete_rear()
    cq.print()


