https://wikidocs.net/34534
https://ctrlaltdileep.me/how-to-code-a-linked-list-in-python/
https://github.com/rajputd/python_algorithms_and_data_structures/blob/master/linked_list/LinkedList.py
https://www.gousios.gr/courses/algo-ds/assignment-lists-solutions.html
https://stonesoupprogramming.com/2017/05/20/doubly-linked-list-python/
https://stackoverflow.com/questions/33004034/how-to-implement-insert-method-in-a-doubly-linked-list
https://velog.io/@johnque/Python-Double-LinkedList


9 ↦ 연산의 개수: 9
A 1 D ↦ add(list, 1, 'D')
A 2 a ↦ add(list, 2, 'a')
A 3 y ↦ add(list, 3, 'y')
D 1 ↦ delete(list, 1)
P ↦ print(list)
G 3 ↦ get_entry(list, 3)
A 1 S ↦ add(list, 1, 'S')
P ↦ print(list)
G 3 ↦ get_entry(list, 3


    # add(list, r, e) : list의 순위 r에 원소 e를 추가한다. 
    # delete(list, r) : list의 순위 r에 위치한 원소를 삭제한다. 
    # get(list, r) : list의 순위 r에 위치한 원소를 반환한다.
    # print(list) : list의 모든 원소를 저장 순위대로 공백없이 출력한다


===============================

class Node:

    def __init__(self, data, prev, next):
        self.item = data
        self.prev = prev
        self.next = next


class dlist:

    def __init__(self):
        self.head = Node(None, None, None)
        self.tail = Node(None, None, None)
        self.head.next = self.tail
        self.tail.prev = self.head
        self.size = 0

    def size(self):
        return self.size

    def isempty(self):
        return self.size == 0

    def insert_before(self, p, item):
        t = p.prev
        n = Node(item, t, p)
        p.prev = n
        t.next = n
        self.size += 1

    def insert_after(self, p, item):
        t = p.next
        n = Node(item, p, t)
        p.next = n
        t.prev = n
        self.size += 1

    def delete(self, x):
        f = x.prev
        r = x.next
        f.next = r
        r.prev = f
        self.size -= 1
        return 

    def print_list(self):
        if self.isempty():
            print('list is empty')
        else:
            p = self.head.next
            while p != self.tail:
                if p.next != self.tail:
                    print(p.item, end=' ')
                else:
                    print(p.item)
                p = p.next

if __name__ == '__main__':

    s = dlist()
    s.insert_after(s.head, 'M')
    s.insert_before(s.tail, 'N')
    s.insert_before(s.tail, 'B')
    s.insert_after(s.head.next, 'V')
    s.print_list()

    s.delete(s.tail.prev)
    s.print_list()

    s.insert_before(s.tail, 'C')
    s.print_list()
