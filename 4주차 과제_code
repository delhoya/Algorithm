def switch_linked_list(idx):
    dict_linked_list = {
        
        'A':'add',
        'D':'delete',
        'R':'remove',
        'C':'create'
        
    }
    return dict_linked_list.get(idx)


switch_linked_list('A')

class dlist:

    # 노드 클래스 및 생성자 
    class node:
        def __init__(self,item,prev,next):
            self.item = item
            self.prev = prev
            self.next = next
    
    # 링크드 리스트 생성자 
    # head ,tail 은 내용 없음(더미)(초기화)
    def __init__(self):
        self.head = self.node(None,None,None)
        self.tail = self.node(None,self.head,None)
        self.head.next = self.tail
        self.size = 0 
    
    #  리스트 사이즈 함수 
    def size(self):
        return self.size 
    
    # 비어있으면 0 리턴 
    def isempty(self):
        return self.size ==0
    
    # p 이전 삽입 
    # p.prev 가 노드 n 가리킴, t.next 가 노드 n 가리킴  
    def insert_before(self,p,item):
        t = p.prev
        n = self.node(item,t,p)
        p.prev = n
        t.next = n
        self.size +=1
    
    # p 이후 삽입
    # p.next 가 노드 n 가리킴, t.prev 가 노드 n 가리킴
    def insert_after(self,p,item):
        t = p.next
        n = self.node(item,p,t)
        p.next = n
        t.prev = n
        self.size +=1
    
    # 노드 삭제 f (front)와 r (rear) 을 이용하여 x의 전 후를 먼저 가리키게하고
    # f.next 와 r.prev 를 연결함 
    def delete(self,x):
        f = x.prev
        r = x.next
        f.next = r
        r.prev = f
        self.size -=1
        return x.item
    
    # 노드 순회 / 출력 
    # 비어있지 않은 경우 , tail 일때 item 반환
    def print_list(self):
        if self.isempty():
            print('list is empty')
        else: 
            p = self.head.next 
            while p != self.tail:
                if p.next != self.tail:
                    print(p.item,"<=>",end=' ')
                else :
                    print(p.item)
                p = p.next
                
                
  
s = dlist()
s.insert_after(s.head,'a')
s.insert_before(s.tail,'o')
s.insert_before(s.tail,'c')
s.insert_after(s.head.next,'p')
s.print_list()

s.delete(s.tail.prev)
s.print_list()

s.insert_before(s.tail,'g')
s.print_list()
