class hashChaining:
    class Node:
        def __init__(self, key, next):
            self.key = key
            self.next = next

    def __init__(self, size):
        self.size = size
        self.key_table = [None] * size
        self.key_index = 0

    def hash(self, key):
        return key % self.size
    
    def put(self, key):
        init_hash = self.hash(key)
        temp = self.key_table[init_hash]
        while temp != None:
            temp = temp.next
        # 새 노드 생성 후 단순연결리스트 맨앞에 삽입
        # 체인처럼 동일 키에 이어지게 설정
        self.key_table[init_hash] = self.Node(key,self.key_table[init_hash])
        return None

    def delete(self,key):
        pass

    def get(self, key):
        init_hash = self.hash(key)
        temp = self.key_table[init_hash]
        while temp != None:
            if key == temp.key:
                return temp.key
            temp = temp.next
        return None

    def print_table(self):
        for i in range(self.size):
            print('%2d' % (i), end='')
            temp = self.key_table[i]
            while temp != None:
                print(' ',temp.key, end='')
                temp = temp.next
            print()

    def print_hash(self):
        for i in range(self.size):
            temp = self.key_table[i]
            while temp != None:
                print(temp.key,' ', end='')
                temp = temp.next


if __name__ == '__main__':

    # 해시테이블 크기(size) 입력
    t = hashChaining(int(input()))
    t.put(25)
    t.put(37)
    t.put(18)
    t.put(55)
    t.put(22)
    t.put(35)
    t.put(50)
    t.put(63)
    t.print_table()
    t.print_hash()
